package main

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNewMerkleTree(t *testing.T) {
	data := [][]byte{
		[]byte("node1"),
		[]byte("node2"),
		[]byte("node3"),
		[]byte("node4"),
		[]byte("node5"),
		[]byte("node6"),
		[]byte("node7"),
		[]byte("node8"),
	}
	// Level 1
	n1 := NewMerkleNode(nil, nil, data[0])
	n2 := NewMerkleNode(nil, nil, data[1])
	n3 := NewMerkleNode(nil, nil, data[2])
	n4 := NewMerkleNode(nil, nil, data[3])
	n5 := NewMerkleNode(nil, nil, data[4])
	n6 := NewMerkleNode(nil, nil, data[5])
	n7 := NewMerkleNode(nil, nil, data[6])
	n8 := NewMerkleNode(nil, nil, data[7])

	// Level 2
	n9 := NewMerkleNode(n1, n2, nil)
	n10 := NewMerkleNode(n3, n4, nil)
	n11 := NewMerkleNode(n5, n6, nil)
	n12 := NewMerkleNode(n7, n8, nil)

	// Level 3
	n13 := NewMerkleNode(n9, n10, nil)
	n14 := NewMerkleNode(n11, n12, nil)

	// Level 4
	n15 := NewMerkleNode(n13, n14, nil)

	fmt.Printf("%x\n", n15.Data)

	mTree := NewMerkleTree(data)
	fmt.Printf("%x\n", mTree.RootNode.Data)

	assert.Equal(t, fmt.Sprintf("%x", n15.Data), fmt.Sprintf("%x", mTree.RootNode.Data), "Merkle tree root hash is correct")
}
